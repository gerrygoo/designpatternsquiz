= Design Patterns Quiz App

This documentation was developed as part of a programming
prohect for the <em>Software Design and Architecture</em>
course (_Tc3049_), at the Tecnológico de Monterrey, Campus
Estado de México. It documents a web application that uses
the Sinatra DSL and AWS-Lambda-Hosted microservices to implement
a quiz game with questions about the Design Patterns covered in class.

== Authors

* *A01371872* <em>Gerardo Galván</em>
* *A01377503* <em>Ian Neumann</em>
* *A01371779* <em>Andrés de Lago</em>

== Installing and Running the Application

You need to have Ruby 2.3 or more recent and the {Sinatra}[http://www.sinatrarb.com/] and the {Faraday}[https://github.com/lostisland/faraday] gems installed in your system to run the _Design Patterns Quiz_ web application. To run the server type the following command at the terminal from the +greeter/src+ directory:

    $ ruby -I . -w app.rb

Afterwards, point your web browser the server’s root URL.

== 4+1 Architectural View Model
=== Logical View

The logical view contains information about the various parts of the system. In UML the logical view is typically modeled using <em>class diagrams</em>.

For example, the following figure represents the UML class diagram for the +Greeter+ model and its factory class:

rdoc-image:img/class_diagram.png

You can include as many of these diagrams as you consider necessary. Note that you only need to specify the names of the classes and their relationships. Don’t include attributes or method names in these diagrams.

To include an image in this document, copy it to the +img+ directory and refer it as: +rdoc-image:img/some_image.png+. You can use any web supported image format (PNG, JPEG, GIF, etc.).

=== Process View

The process view focuses on the runtime behavior of the system. In UML, <em>activity diagrams</em> are used to model this view.

rdoc-image:img/activity_diagram.png

=== Development View

The development view focuses on software modules and subsystems. In UML, <em>package diagrams</em> are used to model the development view.

rdoc-image:img/package_diagram.png

=== Physical View

The physical view describes the physical deployment of the system, revealing which pieces of software run on what pieces of hardware. In UML, <em>deployment diagrams</em> are used to model the physical view.

rdoc-image:img/deployment_diagram.png

=== Scenarios

This view describes the functionality of the system from the perspective from outside world. It contains diagrams describing what the system is supposed to do from a black box perspective. UML <em>use case diagrams</em> are used for this view.

rdoc-image:img/use_case_diagram.png

== Patterns Used

- <b>Domain-Specific Language</b>: The +server.rb+ file consists of a series of Sinatra _routes_. Sinatra is a DSL for creating web applications in Ruby.
- <b>Model-View-Controller</b>: The application follows the classical web implementation of the MVC architectural pattern. The models (+.rb+ files) and views (+.erb+ files) are stored in the corresponding +models+ and +views+ directory. The controller is contained in +server.rb+ file.
- <b>Microservices</b>: The _Patterns Quiz_ application consumes microservices implemented and hosted in AWS Lambdas to present the questions and keep track of the

== Acknowledgments

- The {Greeter example}[http://34.212.143.74/s201911/tc3049/greeter.tgz] Application by {our professor}[http://arielortiz.info/] Ariel Ortiz

== References

- \Ph. Kruchten. <em>The 4+1 View Model of Architecture.</em> IEEE Software, vol. 12 (6), pp. 45-50, 1995. {\http://www.ics.uci.edu/~andre/ics223w2006/kruchten3.pdf}[http://www.ics.uci.edu/~andre/ics223w2006/kruchten3.pdf] Accessed April 11, 2019.

- \R. Olsen. <em>Design Patterns in Ruby.</em> Addison-Wesley, 2007.

- Ruby-Doc.org. <em>RDoc Markup Reference.</em> {\http://ruby-doc.org/stdlib-2.6.2/libdoc/rdoc/rdoc/RDoc/Markup.html}[http://ruby-doc.org/stdlib-2.6.2/libdoc/rdoc/rdoc/RDoc/Markup.html] Accessed April 11, 2019.
